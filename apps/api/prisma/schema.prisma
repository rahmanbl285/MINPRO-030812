// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

enum EventCategory {
  Festival
  Konser
  Pertandingan
  Pameran
  Workshop
  Pertunjukan
  Seminar
}

enum PointStatus {
  Active
  Expired
}

enum DiscountStatus {
  Active
  Expired
}

enum OrderStatus {
  Pending
  WaitingConfirmation
  Paid
  Cancel
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

model User {
  id               Int        @id @default(autoincrement())
  fullName         String
  username         String     @unique
  email            String     @unique
  password         String
  profileImg       String?
  userToken        String?
  usedReferralCode String? // referral code orang lain yang digunakan ketika register
  isActive         Boolean    @default(false)
  isEventOrganizer Boolean    @default(false)
  createdAt        DateTime   @default(now())
  referral         String?    @unique
  Points           Points[]
  Event            Event[] // nama penyelenggara event tuh ntar sesuai dengan nama profile si user
  Discount         Discount[]
  Cart             Cart?
  Order            Order[]
  Review           Review[]
}

model Points {
  id           Int         @id @default(autoincrement())
  userId       Int
  currentPoint Int
  createdDate  DateTime    @default(now())
  expiredDate  DateTime    @default(now())
  pointStatus  PointStatus
  user         User        @relation(fields: [userId], references: [id])
  Order        Order[]
}

model Discount {
  id              Int            @id @default(autoincrement())
  userId          Int
  currentDiscount Int
  createdDate     DateTime       @default(now())
  expiredDate     DateTime
  discountStatus  DiscountStatus
  user            User           @relation(fields: [userId], references: [id])
  Order           Order[]
}

model Event {
  id            Int           @id @default(autoincrement())
  userId        Int?
  eventTitle    String
  startDate     DateTime
  endDate       DateTime
  eventImage    String
  eventCategory EventCategory
  eventLocation String
  description   String        @db.LongText
  eventSlug     String?       @unique
  ticketName    String
  isPaid        Boolean       @default(false)
  availableSeat Int
  ticketPrice   Int
  startSaleDate DateTime
  endSaleDate   DateTime
  CartItem      CartItem[]
  OrderItem     OrderItem[]
  Review        Review[]
  User          User?         @relation(fields: [userId], references: [id])
}

model PromoTiket {
  id            Int       @id @default(autoincrement())
  promoName     String?
  promoDiscount Int?
  createdAt     DateTime? @default(now())
  expiredAt     DateTime?
}

model Cart {
  id       Int        @id @default(autoincrement())
  userId   Int        @unique
  user     User       @relation(fields: [userId], references: [id])
  CartItem CartItem[]
}

model CartItem {
  id       Int   @id @default(autoincrement())
  cartId   Int
  eventId  Int
  quantity Int
  cart     Cart  @relation(fields: [cartId], references: [id])
  event    Event @relation(fields: [eventId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  amount      Float
  discountId  Int?
  pointsId    Int?
  status      OrderStatus
  orderDate   DateTime    @default(now())
  expiredDate DateTime    @default(now()) // ini tuh expired pembayarannya
  user        User        @relation(fields: [userId], references: [id])
  discount    Discount?   @relation(fields: [discountId], references: [id])
  points      Points?     @relation(fields: [pointsId], references: [id])
  OrderItem   OrderItem[]
  Payment     Payment[]
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  orderId  Int
  eventId  Int
  quantity Int
  order    Order @relation(fields: [orderId], references: [id])
  event    Event @relation(fields: [eventId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int
  amount        Float
  paymentStatus PaymentStatus
  createdAt     DateTime      @default(now())
  order         Order         @relation(fields: [orderId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
}
